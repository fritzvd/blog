<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Favourites on fritzvd</title>
    <link>http://blog.fritzvd.com/tags/favourites/</link>
    <description>Recent content in Favourites on fritzvd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2013 11:48:43 +0000</lastBuildDate>
    <atom:link href="http://blog.fritzvd.com/tags/favourites/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Angular JS Favourites/Favorites &amp;#8211; Directives &amp;#8211;  jQuery UI Slider</title>
      <link>http://blog.fritzvd.com/2013/06/18/angular-js-favorites-directives-jquery-ui-slider/</link>
      <pubDate>Tue, 18 Jun 2013 11:48:43 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/06/18/angular-js-favorites-directives-jquery-ui-slider/</guid>
      <description>

&lt;p&gt;Last time I wrote something about something very simple, but something I really enjoy. Conditional classes and inline event handlers. It&amp;#8217;s not a very difficult or complex feature. But I did not find a lot of writing about it. And also it saved me loads of jQuery statements that you don&amp;#8217;t want in a controller, but in the UI.&lt;/p&gt;

&lt;h3 id=&#34;next-up-directives:f3744e420fdc4e8aafb0a8196a307cc8&#34;&gt;Next up: Directives.&lt;/h3&gt;

&lt;p&gt;&lt;a title=&#34;Angular Docs on Directives&#34; href=&#34;http://docs.angularjs.org/guide/directive&#34; target=&#34;_blank&#34;&gt;Directives&lt;/a&gt; are pret-ty awesomevilles. For the &amp;#8220;stop/play video player like&amp;#8221;-thing we are building, we would like to have a timeline or time slider, to go back to a previous images. Normally this would be a jQuery (jQuery UI) call like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax html&#34;&gt;&amp;lt;div id=&#34;id-of-div-or-wha-evah&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;javascript syntax&#34;&gt;$(&#39;#id-of-div-or-wha-evah&#39;).slider()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which would be fine if you need only one of these, or if you would have a small app. With an Angular Directive it becomes a bit more complex, but also a lot more useful. Our product is a &lt;a title=&#34;3di&#34; href=&#34;http://www.3di.nu&#34; target=&#34;_blank&#34;&gt;groundbreaking flooding model&lt;/a&gt;. Basically you can run a super fast flooding simulation in the cloud and look at the results on-the-fly in your browser. With every simulation step the complete timeline becomes longer, thus we need a timeline that can listen to other states and messages in our application. Because all the states and messages are already in the app, I don&amp;#8217;t want to jQuery my way out of this one.&lt;/p&gt;

&lt;p&gt;So I created the following HTML component and angular directive.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re to lazy to look up the &lt;a title=&#34;Angular Docs on Directives&#34; href=&#34;http://docs.angularjs.org/guide/directive&#34; target=&#34;_blank&#34;&gt;docs&lt;/a&gt;, I&amp;#8217;ll give you some pointers. The most important thing to notice here is that the directive and the html element correspond because of the title. The html tag: &lt;em&gt;&lt;jq-schlider&gt;&lt;/em&gt; is recognized by the &lt;em&gt;jqSchlider&lt;/em&gt; directive defined in angular because of the &lt;em&gt;restrict: &amp;#8216;E&amp;#8217;&lt;/em&gt; line. The &lt;em&gt;E&lt;/em&gt; stands for element but can also be replaced by something else (look in the docs) if that has your fancy.&lt;/p&gt;

&lt;p&gt;The HTML attributes max and at are picked up by the directive as variables. The values come from the Controller in which the jqSchlider will be inserted.&lt;/p&gt;

&lt;p&gt;The fiddle below is a working example:&lt;/p&gt;

&lt;p&gt;Get this btw it&amp;#8217;s great:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular JS Favourites/Favorites &amp;#8211; Conditional CSS classes</title>
      <link>http://blog.fritzvd.com/2013/06/17/starting-angular-js-favourite-features-or-favorites-if-your-from-the-u-s/</link>
      <pubDate>Mon, 17 Jun 2013 17:22:19 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/06/17/starting-angular-js-favourite-features-or-favorites-if-your-from-the-u-s/</guid>
      <description>

&lt;p&gt;Last few weeks at work I have been trying out Angular JS. First of all, because it is fun and useful to try out new stuff. Secondly because after working with &lt;a title=&#34;marionette&#34; href=&#34;http://marionettejs.com/&#34; target=&#34;_blank&#34;&gt;Backbone/Marionette&lt;/a&gt; for a few months some things felt that they could&amp;#8217;ve been done better. So whilst working on a big Backbone/Marionette &lt;a title=&#34;ddsc&#34; href=&#34;http://github.com/ddsc/webclient&#34; target=&#34;_blank&#34;&gt;project&lt;/a&gt; I started looking at Angular a bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll just show you some of my favourite features. We are building an app that needs to play, stop, pause etc much like a video player. But we need to do quite a bit more than that. I&amp;#8217;ll highlight two features that really helped out clear out some old jQuery blah blah. Maybe I&amp;#8217;ll write some more on my favourites coming week.&lt;/p&gt;

&lt;h3 id=&#34;conditional-css-classes:acafb5aefad66b0cd6e57453de04b7cf&#34;&gt;&lt;strong&gt;Conditional CSS classes:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;One thing that I kept running into is having to decide when to use a jQuery handler or a Backbone built-in function to toggle a CSS class. This sounds trivial, and maybe it is, but this is such a common feature in a interactive client, that it is a relief to see it handled nicely.&lt;/p&gt;

&lt;h3 id=&#34;inline-coupling-of-dom-element-and-javascript-function:acafb5aefad66b0cd6e57453de04b7cf&#34;&gt;&lt;strong&gt;Inline coupling of DOM element and javascript function:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I know, I know this is done in almost any MVC framework. But I just like the way Angular has set this up. Just add HTML attribute &lt;code&gt;ng-click=&amp;quot;nameoffunction()&amp;quot;&lt;/code&gt; and the &lt;code&gt;$scope.nameoffunction&lt;/code&gt; function responds to this. Example below clarifies both Conditional CSS classes and click-handler.&lt;/p&gt;

&lt;p&gt;Example play and stop button.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax html&#34;&gt;&amp;lt;div ng-controller=&#34;RemoteControl&#34;&amp;gt; 
  &amp;lt;a id=&#34;btn-play&#34; class=&#34;btn&#34; ng-class=&#34;{active: isPlaying}&#34; ng-click=&#34;play()&#34;&amp;gt;
    &amp;lt;i class=&#34;icon-play&#34;&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;syntax javascript&#34;&gt;app.controller(&#34;RemoteControl&#34;, [&#34;$scope&#34;], function($scope){
   $scope.isPlaying = false;

   $scope.play = function() {
      if ($scope.isPlaying) {
        // if already playing turn it off.
        $scope.isPlaying = false;
      } else {
         // do stuff involved with play
         // switch isPlaying to true
         $scope.isPlaying = true;
      }
   }
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next week I&amp;#8217;ll make some time to discuss Directives.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>