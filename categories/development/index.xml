<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on fritzvd</title>
    <link>http://blog.fritzvd.com/categories/development/</link>
    <description>Recent content in Development on fritzvd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jul 2015 08:19:19 +0000</lastBuildDate>
    <atom:link href="http://blog.fritzvd.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing Documentation @ nodeconf 2015</title>
      <link>http://blog.fritzvd.com/2015/07/01/writing-documentation-nodeconf-2015/</link>
      <pubDate>Wed, 01 Jul 2015 08:19:19 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/07/01/writing-documentation-nodeconf-2015/</guid>
      <description>&lt;p&gt;This topic of course ties in with &lt;a href=&#34;http://blog.technokrat.nl/2015/07/01/building-communities-nodeconf-2015/&#34;&gt;the Building Communities session&lt;/a&gt;. Because building community happens with code that is being used. And if you want people to be able to join easily, one of their first entry points will probably be the README, which has for some projects become the only or the main documentation.&lt;/p&gt;

&lt;p&gt;At the moment the documentation of some projects is exemplary (think: anything &lt;a href=&#34;https://twitter.com/substack&#34; target=&#34;_blank&#34;&gt;@substack&lt;/a&gt; makes). Whereas the documentation of node itself is kind of a mess. The API documentation is varying in quality in different topics, there is no proper way to navigate within the page and structure is &amp;#8220;organic&amp;#8221;.&lt;/p&gt;

&lt;p&gt;The goals of documentation we concluded in the session should always be, to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exhaustive&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Simple&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Helpful&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connected/Linked (linking to back and forth to other pieces or other blogs).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be achieved by creating proper articles, for beginners but also for advanced topics. Or at link out to expert articles on other blogs. This should be a seperate set from the API documentation. The API documentation should be structured and be complete. In stead of missing some pieces here and there. An example I really like is the &lt;a href=&#34;https://docs.djangoproject.com/en/1.8/&#34; target=&#34;_blank&#34;&gt;Django documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/matthewbergman/18876975441/in/album-72157654202715069/&#34; target=&#34;_blank&#34;&gt;Cover photo by Matthew Bergman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Communities @ nodeconf 2015</title>
      <link>http://blog.fritzvd.com/2015/07/01/building-communities-nodeconf-2015/</link>
      <pubDate>Wed, 01 Jul 2015 07:45:51 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/07/01/building-communities-nodeconf-2015/</guid>
      <description>&lt;p&gt;A lot of the talks were not just about code or &amp;#8220;hardcore&amp;#8221; technical stuff, but also about social things like: building community, writing documentation, creating a safe environment. Which in the software meetups and talks scene has been growing as a topic. To dismay of some, and celebration of others.&lt;/p&gt;

&lt;p&gt;This session started out as a discussion about the node project, &amp;#8220;the Fork&amp;#8221;: io.js and what it says about the community and the culture of node. This meant 3 core contributors telling about where they see the project failed, and what it did right, but also how to progress in the future.&lt;/p&gt;

&lt;p&gt;First of all the io.js/node.js community would like to do better. They would like to be the role model for other projects. Adding stuff like a Code of Conduct instead of just code to a project. Some projects are still outshining in core values like: diversity, inclusivity and lowering the barrier to entry. And some projects are just outright mean. As an example the Johnny-Five (robotics) project was mentioned as a community which is really thriving and is able to maintain those key values, as&lt;/p&gt;

&lt;p&gt;opposed to &amp;#8220;that other robotics&amp;#8221;-project in node.&lt;/p&gt;

&lt;p&gt;A reason for this was giving by one of their maintainers: &amp;#8220;Focus on the right stuff early on&amp;#8221;. And to be frank that is true of any kind of standard you want to have in a project. Do you want a clean code base? Focus on that early on? Do you want a lot of test coverage? Don&amp;#8217;t add it as an afterthought. Do you want anyone from any color, creed and orientation to feel welcome? Don&amp;#8217;t &amp;#8220;add&amp;#8221; that when your code is ready to ship.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES6 &#43; ES7, EcmaScript 2015 -- Harmony .. WHAT? @ nodeconf 2015</title>
      <link>http://blog.fritzvd.com/2015/07/01/es6-es7-ecmascript-2015-harmony-what-nodeconf-2015/</link>
      <pubDate>Wed, 01 Jul 2015 07:35:35 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/07/01/es6-es7-ecmascript-2015-harmony-what-nodeconf-2015/</guid>
      <description>

&lt;h3 id=&#34;javascript-gets-a-new-version-what-now:3c3a1f5ebe0864f8b13a5155819bec5d&#34;&gt;JavaScript gets a new version, what now&lt;/h3&gt;

&lt;p&gt;Languages are never done. They evolve over time and are supplemented with new words every month, new phrases every year and acquires (minor) grammar changes every decade. This true for speaking languages as well as for programming languages.&lt;/p&gt;

&lt;p&gt;The past year there has been a lot of talk about EcmaScript 6 (a.k.a. ES Harmony, or lately ES2015, which is the silliest name of all). A set of features that is coming, or has already landed for JavaScript. ES6 is nothing more than a specification of features according to &lt;a href=&#34;https://twitter.com/mikeal&#34; target=&#34;_blank&#34;&gt;Mikeal Rogers&lt;/a&gt;. A specification of features that have been designed, but are not certain to land in the coming years. Some of them are just syntactic sugar (classes,9 , that don&amp;#8217;t add anything new. Some are hurting performance and some are just plain great.&lt;/p&gt;

&lt;p&gt;In the node community there has been some commotion surrounding ES6 because most of the features were suddenly being implemented in a fork of node called &amp;#8220;io.js&amp;#8221;. The temporary fork and squabble that is/has been (depending on when you read this) &lt;a href=&#34;iojs.org&#34;&gt;&amp;#8220;io.js&lt;/a&gt;&amp;#8221; was mainly to move node forward and out of a corporate governance model to a more open model. But you should just &lt;a href=&#34;http://blog.izs.me/post/104685388058/io-js&#34; target=&#34;_blank&#34;&gt;read&lt;/a&gt; &lt;a href=&#34;http://www.wired.com/2014/12/io-js/&#34; target=&#34;_blank&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;http://readwrite.com/2015/02/27/node-js-io-js-reconciliation-near&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt; &lt;a href=&#34;http://venturebeat.com/2015/05/13/node-project-spinoff-io-js-is-moving-to-the-node-js-foundation-with-a-merge-in-progress/&#34; target=&#34;_blank&#34;&gt;explaining&lt;/a&gt; &lt;a href=&#34;http://www.infoworld.com/article/2855057/application-development/why-iojs-decided-to-fork-nodejs.html&#34; target=&#34;_blank&#34;&gt;that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to play around with these features, you either have to wait for some of the features to be implemented (in browsers and node.js alike), or you need a transpiler or polyfill framework, for backwards compatibility or even to run it because no one supports it yet&amp;#8230; Most people are using &lt;a href=&#34;https://babeljs.io/docs/learn-es2015/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt; which has a very decent set of docs and examples and transpiles your code back to ES5.&lt;/p&gt;

&lt;p&gt;The thing that excites me most is the native promise implementation and the generators.&lt;/p&gt;

&lt;p&gt;Then some people were really enthusiastic about an ES7 proposal for asynchronous functions: &lt;code&gt;async&lt;/code&gt;. If a function is async, you just &amp;#8220;tell&amp;#8221; the VM by doing this (example taken from the &lt;a href=&#34;https://github.com/lukehoban/ecmascript-asyncawait&#34; target=&#34;_blank&#34;&gt;async proposal&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax javascript&#34;&gt;async function getData() {
  var items = await fetchAsync(&#39;http://example.com/users&#39;);
  return await* items.map(async(item) =&amp;gt; {
    return {
      title: item.title,
      img: (await fetchAsync(item.userDataUrl)).img
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take note of the &lt;code&gt;async&lt;/code&gt; and the &lt;code&gt;await&lt;/code&gt; keywords.&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&#34;https://github.com/DJCordhose/ecmascript-2015-iojs&#34; target=&#34;_blank&#34;&gt;workshops&lt;/a&gt; at nodeconf was also about ES2015. It gives an overview of most features and you can play with the examples.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/matthewbergman/18686339600/in/album-72157654202715069/&#34; target=&#34;_blank&#34;&gt;Cover photo by Matthew Bergman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Containers (Docker, LXC) @ nodeconf 2015</title>
      <link>http://blog.fritzvd.com/2015/06/23/containers-docker-lxc-nodeconf-2015/</link>
      <pubDate>Tue, 23 Jun 2015 18:45:44 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/06/23/containers-docker-lxc-nodeconf-2015/</guid>
      <description>

&lt;h3 id=&#34;containers-like-the-ones-you-put-sundries-in:c8d86957e871d24595032033427258dc&#34;&gt;Containers, like the ones you put sundries in?&lt;/h3&gt;

&lt;p&gt;Linux Containers (LXC) have been a hot new topic over the last 2 years. The easiest way to understand a container is to compare it with a Virtual Machine (VM). You can run a VM on your machine and it will pretend to be a computer inside a computer. It will emulate hardware so it can run an Operating System (OS) within your computer. When you start a VM you have to choose how much of your memory and CPU it can take up, and once you start the machine that piece of memory and CPU are designated to the VM (the guest) and lost to your computer (the host).&lt;/p&gt;

&lt;p&gt;When you start a LXC however, you can start a box without it having to emulate machinery, it will create a &amp;#8220;contained&amp;#8221; environment, sharing the stuff that is common (the Linux kernel), and fork out a platform to run your processes and OS (any Linux variant) on. Running that container then, doesn&amp;#8217;t take that much extra memory, because it doesn&amp;#8217;t need to run an entire machine, with hardware and OS. But just the part that is different from the host. This also means bootups of a new container are close to instantaneous.&lt;/p&gt;

&lt;h3 id=&#34;docker:c8d86957e871d24595032033427258dc&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;One of the products that was born as a result of this kernel API is: Docker. Docker makes it possible to create a container that you can provision and deploy your app on, and commit those changes to the box. It&amp;#8217;s like git for machines. All the changes to your box can be committed. Once you think your container is ready for deployment you can take the whole image and deploy that on a server. Instead of deploying your code, you now deploy your container.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.technokrat.nl/wp-content/uploads/2015/06/62260701.jpg&#34;&gt;&lt;img src=&#34;http://blog.technokrat.nl/wp-content/uploads/2015/06/62260701-300x200.jpg&#34; alt=&#34;yo dawg&#34; width=&#34;300&#34; height=&#34;200&#34; class=&#34;alignnone size-medium wp-image-641&#34; srcset=&#34;http://blog.technokrat.nl/wp-content/uploads/2015/06/62260701-300x200.jpg 300w, http://blog.technokrat.nl/wp-content/uploads/2015/06/62260701.jpg 500w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-do-that:c8d86957e871d24595032033427258dc&#34;&gt;Why would you do that?&lt;/h3&gt;

&lt;p&gt;Instead of killing a process or restarting a server, you just swap out a container. Deployment can become instant. You test the container on your local box, integration server, staging and production, it will be a matter of switching to an image, instead of deploying the code on there. If it doesn&amp;#8217;t work, you can just go back a commit. Easy as pie.&lt;/p&gt;

&lt;h3 id=&#34;using-vagrant:c8d86957e871d24595032033427258dc&#34;&gt;Using Vagrant?&lt;/h3&gt;

&lt;p&gt;If you&amp;#8217;re using Vagrant you can actually try this already instead of using your VM&amp;#8217;s (read: slow VM&amp;#8217;s). Check this vagrant plugin out: &lt;a href=&#34;https://github.com/fgrehm/vagrant-lxc&#34; target=&#34;_blank&#34;&gt;vagrant lxc&lt;/a&gt;. You can just try it out here. Play around, install all kinds of conflicting versions of software, destroy the box, and enjoy how you didn&amp;#8217;t completely bork your dev environment.&lt;/p&gt;

&lt;p&gt;The people from &lt;a href=&#34;http://modulus.io&#34; target=&#34;_blank&#34;&gt;Modulus&lt;/a&gt; were in the session too, telling how happy they&amp;#8217;ve been with Docker. They were really excited about &lt;a href=&#34;https://github.com/docker/swarm/&#34; target=&#34;_blank&#34;&gt;Docker Swarm&lt;/a&gt;. A proxy API with which you can use the same Docker API you&amp;#8217;re used to, but have it talk to multiple instances in one API call.&lt;/p&gt;

&lt;h3 id=&#34;best-practices-for-docker-containers:c8d86957e871d24595032033427258dc&#34;&gt;Best practices for Docker containers&lt;/h3&gt;

&lt;p&gt;First of all, most people agreed they&amp;#8217;re is not really a &amp;#8220;wrong&amp;#8221; way to do a Dockerfile. When your Docker container becomes more complex it will become bigger though. Just like a git repository, the more commits, the bigger the git tree will become. Because it tracks the changes. A common practice is to compile and build a docker container and copy the compiled version to an empty docker image, to keep it small.&lt;/p&gt;

&lt;p&gt;Other people suggested running a startup script inside the Docker image, instead of having the Dockerfile do all the provisioning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/matthewbergman/18845642595/in/album-72157654202715069/&#34; target=&#34;_blank&#34;&gt;Cover photo by Matthew Bergman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Universal (Isomorphic) JavaScript and Modular UI @ nodeconf 2015</title>
      <link>http://blog.fritzvd.com/2015/06/22/isomorphic-javascript-and-modular-ui-nodeconf-2015/</link>
      <pubDate>Mon, 22 Jun 2015 14:20:37 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/06/22/isomorphic-javascript-and-modular-ui-nodeconf-2015/</guid>
      <description>&lt;p&gt;N.B. This one of the first sessions held at nodeconf, everybody was still somewhat rusty.&lt;/p&gt;

&lt;p&gt;Isomorphic JavaScript is the practice of using the same JavaScript code on the server and in the browser. In the session we talked about how to best implement this, and what to avoid. The naming is ridiculous, so let&amp;#8217;s just use &lt;a href=&#34;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&#34; target=&#34;_blank&#34;&gt;Universal JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the first recommendations were to do static analysis. This goes through your code and finds dead dependencies or function that are never called. By using this you can eliminate redundancy in this way. Some modules that work great for this are &lt;a href=&#34;https://twitter.com/substack&#34; target=&#34;_blank&#34;&gt;@substack&amp;#8217;s&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/detective&#34; target=&#34;_blank&#34;&gt;detective&lt;/a&gt; or the module tree analysis by &lt;a href=&#34;https://twitter.com/hughsk&#34; target=&#34;_blank&#34;&gt;@hughsk&lt;/a&gt; called &lt;a href=&#34;http://hughsk.io/disc/&#34; target=&#34;_blank&#34;&gt;disk&lt;/a&gt; (looks good too!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Substack actually did a talk on Abstract Syntax Tree&amp;#8217;s (which can be used to do static analysis) at &lt;a href=&#34;https://jquerysf.com&#34; target=&#34;_blank&#34;&gt;jQuerySF&lt;/a&gt;, which goes a bit more into detail on what you can do with AST&amp;#8217;s and how Static Analysis works behind the scenes.&lt;/p&gt;

&lt;p&gt;React got a lot of attention too. A small template rendering engine that let&amp;#8217;s you render the page on the server, and with the same set of libraries render the changes on the front-end. So the page is fully loaded when you first land on the page, in stead of the startup time that&amp;#8217;s required for full-fledged MVC(-likes) such as: AngularJS, Ember and Backbone. React&amp;#8217;s server side rendering here is the one thing that really stands out, together with the speed and the small size of the library. Most people really seem to be fond of this approach (after dealing with the ugliness which is JSX).&lt;/p&gt;

&lt;p&gt;According to substack, we shouldn&amp;#8217;t use big shims, we shouldn&amp;#8217;t use frameworks. Because it will break stuff, or come back to haunt you. Especially if you&amp;#8217;re trying to run Universal JS. We should create small modules that uses CommonJS&amp;#8217; &lt;code&gt;module.exports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This kind of moved on to the discussion of Modular UI which was another topic. The gist of this session was to make modules that expose css and assets through inline css or conditional building. A well known implementation doing UI in this way is the &lt;a href=&#34;https://www.polymer-project.org/1.0/docs/devguide/feature-overview.html&#34; target=&#34;_blank&#34;&gt;Polymer Project&lt;/a&gt;. Every component is a module that doesn&amp;#8217;t have to be a part of the rest of the project. To include a small piece, you just: &lt;code&gt;npm install --save my-special-module&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://twitter.com/davidguttman&#34; target=&#34;_blank&#34;&gt;David Guttman&amp;#8217;s&lt;/a&gt; &lt;a href=&#34;https://github.com/davidguttman/cssify&#34; target=&#34;_blank&#34;&gt;cssify&lt;/a&gt; for a way to include the required css files with browserify.&lt;/p&gt;

&lt;p&gt;The rest of my notes say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distribution.&lt;/li&gt;
&lt;li&gt;UMD.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if anyone feels like filling me on on what this meant, that would be grand. &lt;img src=&#34;http://blog.technokrat.nl/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/matthewbergman/18687844349/in/album-72157654202715069/&#34; target=&#34;_blank&#34;&gt;Cover photo by Matthew Bergman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FBX and 3d models in Monogame &amp;#8211; on Linux</title>
      <link>http://blog.fritzvd.com/2015/05/19/fbx-and-3d-models-in-monogame-on-linux/</link>
      <pubDate>Tue, 19 May 2015 15:35:39 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2015/05/19/fbx-and-3d-models-in-monogame-on-linux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR the monogame community is pretty great&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lately my manic ambitious mode has turned on again for me. So I have about 100s of ideas again, which sadly of course will all come to nothing. But while I&amp;#8217;m at it, I thought I&amp;#8217;d make the best of it to do some tutorials here and there and learn some stuff I know nothing about.&lt;/p&gt;

&lt;p&gt;Starting with Monogame on Linux is kind of a hassle to start with, but if you push through it works. At the time of writing this I got Monogame 3.4 to work: &lt;a href=&#34;http://www.monogame.net/downloads/&#34; target=&#34;_blank&#34;&gt;Monogame Downloads Page&lt;/a&gt;. If you&amp;#8217;re not very comfortable with&lt;/p&gt;

&lt;p&gt;The real problem was that a tutorial I tried to follow had an old style FBX file that the Monogame Content Pipeline was not willing to load. Everyone told me to use &lt;a href=&#34;http://www.blender.org/download/&#34; target=&#34;_blank&#34;&gt;Blender&lt;/a&gt; to convert it. But.. Blender wasn&amp;#8217;t loading my file, because it was ASCII based. So I had to find a converter. I found the Autodesk one for Linux somewhere in the attic of the internet. I&amp;#8217;ll host it &lt;a href=&#34;http://meuk.technokrat.nl/fbx_converter&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; so I know for sure it won&amp;#8217;t go missing. So install that thing, and convert it (if necessary import and export in Blender too, just to make sure). Your Content Pipeline will thank you.&lt;/p&gt;

&lt;p&gt;P.S. you can find some great free models here: &lt;a href=&#34;http://tf3dm.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tf3dm.com/&#34;&gt;http://tf3dm.com/&lt;/a&gt;&lt;/a&gt;. &lt;a href=&#34;http://tf3dm.com/3d-model/puo-67895.html&#34; target=&#34;_blank&#34;&gt;The featured image is a model made by 3dgenerator: &lt;a href=&#34;http://tf3dm.com/3d-model/puo-67895.html&#34;&gt;http://tf3dm.com/3d-model/puo-67895.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OPEN Open Source</title>
      <link>http://blog.fritzvd.com/2014/09/15/open-open-source/</link>
      <pubDate>Mon, 15 Sep 2014 11:37:34 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2014/09/15/open-open-source/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.&lt;/p&gt;

&lt;p&gt;Rules&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are a few basic ground-rules for contributors:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No &amp;#8211;force pushes or modifying the Git history in any way.&lt;/p&gt;

&lt;p&gt;Non-master branches ought to be used for ongoing work.&lt;/p&gt;

&lt;p&gt;External API changes and significant modifications ought to be subject to an internal pull-request to solicit feedback from other contributors.&lt;/p&gt;

&lt;p&gt;Internal pull-requests to solicit feedback are encouraged for any other non-trivial contribution but left to the discretion of the contributor.&lt;/p&gt;

&lt;p&gt;Contributors should attempt to adhere to the prevailing code-style.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Declaring formal releases remains the prerogative of the project maintainer.&lt;/p&gt;

&lt;p&gt;Changes to this arrangement&lt;/p&gt;

&lt;p&gt;This is an experiment and feedback is welcome! This document may also be subject to pull requests or changes by contributors where you believe you have something valuable to add or change.&lt;/p&gt;

&lt;p&gt;Thanks to Rod Vagg and the LevelUP project for coming up with the idea of &amp;#8220;OPEN Open Source&amp;#8221;!&lt;/p&gt;

&lt;p&gt;(taken from &lt;a href=&#34;https://github.com/rvagg/node-levelup/blob/master/CONTRIBUTING.md&#34; title=&#34;webtorrent contributing&#34; target=&#34;_blank&#34;&gt;node-levelup&lt;/a&gt;&amp;#8216;s contributing page)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Procedural Death Jam, 7 Day Rogue Like, Cyberpunk Game jamathon.</title>
      <link>http://blog.fritzvd.com/2014/03/08/procedural-death-jam-7-day-rogue-like-cyberpunk-game-jamathon/</link>
      <pubDate>Sat, 08 Mar 2014 15:09:25 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2014/03/08/procedural-death-jam-7-day-rogue-like-cyberpunk-game-jamathon/</guid>
      <description>&lt;p&gt;Ok. It&amp;#8217;s official as of 16.04 (CET) I have entered in all of the above mentioned GameJams. This is where I will track my development.&lt;/p&gt;

&lt;p&gt;The project can be found at: &lt;a href=&#34;https://github.com/fritzvd/abime&#34; title=&#34;abime&#34;&gt;https://github.com/fritzvd/abime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It. Is. On!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note to self: Neko target in Haxe does not handle placement of BitmapData well. Been spending an hour to get it to work. Other target was instant.&lt;/p&gt;

&lt;p&gt;&lt;strong Update 2: &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was a very bad week to be working on something like this. Next time I&amp;#8217;ll clear my schedule. This was doomed to fail from the beginning. Lessons learned include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;got familiar with Löve2D&lt;/li&gt;
&lt;li&gt;got more familiar with HaxePunk&lt;/li&gt;
&lt;li&gt;learned about ray casting&lt;/li&gt;
&lt;li&gt;made some math mistakes&lt;/li&gt;
&lt;li&gt;learned to free my schedule&lt;/li&gt;
&lt;li&gt;deal with failure&lt;/li&gt;
&lt;li&gt;great communities that make awesome games&lt;/li&gt;
&lt;li&gt;lower the bar&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Particle Emitter in HaxePunk</title>
      <link>http://blog.fritzvd.com/2014/03/04/particle-emitter-in-haxepunk/</link>
      <pubDate>Tue, 04 Mar 2014 14:34:54 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2014/03/04/particle-emitter-in-haxepunk/</guid>
      <description>&lt;p&gt;For some this will be a trivial example. For me this took a bit longer than I suspected.&lt;/p&gt;

&lt;p&gt;This small example will produce this:&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re planning on making an awesome game you probably want a particle emitter. because.. well look at it.&lt;/p&gt;

&lt;p&gt;What I did is I started a haxepunk project:&lt;/p&gt;

&lt;p&gt;`For some this will be a trivial example. For me this took a bit longer than I suspected.&lt;/p&gt;

&lt;p&gt;This small example will produce this:&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re planning on making an awesome game you probably want a particle emitter. because.. well look at it.&lt;/p&gt;

&lt;p&gt;What I did is I started a haxepunk project:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;And added a file: &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example/blob/master/src/Explosion.hx&#34; title=&#34;Explosion.hx&#34; target=&#34;_blank&#34;&gt;Explosion.hx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Emitter is also a type of Entity, and also needs a graphic. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax actionscript&#34;&gt;import com.haxepunk.graphics.Emitter;
import com.haxepunk.utils.Ease;
import com.haxepunk.Entity;

class Explosion extends Entity
{
    private var _emitter:Emitter;

    public function new()
    {
        super(x, y);
        _emitter = new Emitter(&#34;graphics/particle.png&#34;, 4, 4);
        _emitter.newType(&#34;explode&#34;, [0]);
        _emitter.setMotion(&#34;explode&#34;,       // name
                    0,              // angle
                    100,            // distance
                    2,              // duration
                    360,            // ? angle range
                    -40,            // ? distance range
                    1,              // ? Duration range
                    Ease.quadOut    // ? Easing 
                    );
        _emitter.setAlpha(&#34;explode&#34;, 20, 0.1);
        _emitter.setGravity(&#34;explode&#34;, 5, 1);
        graphic = _emitter;
        layer = -1;
    }

    public function explode(x:Float, y:Float)
    {
        for (i in 0...20)
        {
            _emitter.emit(&#34;explode&#34;, x, y);
        }
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can add the Emitter to your current scene like in my &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example/blob/master/src/MainScene.hx&#34; title=&#34;MainScene.hx&#34; target=&#34;_blank&#34;&gt;MainScene.hx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax actionscript&#34;&gt;import com.haxepunk.Scene;
import Explosion;

class MainScene extends Scene
{
    private var explosion:Explosion;

    public override function begin()
    {
        explosion = new Explosion();
        add(explosion);
    }

    public override function update()
    {
        super.update();
        explosion.explode(230, 240);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lime test neko&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you should see something similar to the emitter above.&lt;/p&gt;

&lt;p&gt;You can checkout my &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example&#34; title=&#34;haxepunk-emitter-example&#34; target=&#34;_blank&#34;&gt;repo&lt;/a&gt; and run it to play around with it.&lt;/p&gt;

&lt;p&gt;I ran into this error below. It meant my sprite was too small. It took me a long time to realize that.&lt;/p&gt;

&lt;p&gt;``For some this will be a trivial example. For me this took a bit longer than I suspected.&lt;/p&gt;

&lt;p&gt;This small example will produce this:&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re planning on making an awesome game you probably want a particle emitter. because.. well look at it.&lt;/p&gt;

&lt;p&gt;What I did is I started a haxepunk project:&lt;/p&gt;

&lt;p&gt;`For some this will be a trivial example. For me this took a bit longer than I suspected.&lt;/p&gt;

&lt;p&gt;This small example will produce this:&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re planning on making an awesome game you probably want a particle emitter. because.. well look at it.&lt;/p&gt;

&lt;p&gt;What I did is I started a haxepunk project:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;And added a file: &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example/blob/master/src/Explosion.hx&#34; title=&#34;Explosion.hx&#34; target=&#34;_blank&#34;&gt;Explosion.hx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Emitter is also a type of Entity, and also needs a graphic. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax actionscript&#34;&gt;import com.haxepunk.graphics.Emitter;
import com.haxepunk.utils.Ease;
import com.haxepunk.Entity;

class Explosion extends Entity
{
    private var _emitter:Emitter;

    public function new()
    {
        super(x, y);
        _emitter = new Emitter(&#34;graphics/particle.png&#34;, 4, 4);
        _emitter.newType(&#34;explode&#34;, [0]);
        _emitter.setMotion(&#34;explode&#34;,       // name
                    0,              // angle
                    100,            // distance
                    2,              // duration
                    360,            // ? angle range
                    -40,            // ? distance range
                    1,              // ? Duration range
                    Ease.quadOut    // ? Easing 
                    );
        _emitter.setAlpha(&#34;explode&#34;, 20, 0.1);
        _emitter.setGravity(&#34;explode&#34;, 5, 1);
        graphic = _emitter;
        layer = -1;
    }

    public function explode(x:Float, y:Float)
    {
        for (i in 0...20)
        {
            _emitter.emit(&#34;explode&#34;, x, y);
        }
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can add the Emitter to your current scene like in my &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example/blob/master/src/MainScene.hx&#34; title=&#34;MainScene.hx&#34; target=&#34;_blank&#34;&gt;MainScene.hx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax actionscript&#34;&gt;import com.haxepunk.Scene;
import Explosion;

class MainScene extends Scene
{
    private var explosion:Explosion;

    public override function begin()
    {
        explosion = new Explosion();
        add(explosion);
    }

    public override function update()
    {
        super.update();
        explosion.explode(230, 240);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lime test neko&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you should see something similar to the emitter above.&lt;/p&gt;

&lt;p&gt;You can checkout my &lt;a href=&#34;https://github.com/fritzvd/haxepunk-emitter-example&#34; title=&#34;haxepunk-emitter-example&#34; target=&#34;_blank&#34;&gt;repo&lt;/a&gt; and run it to play around with it.&lt;/p&gt;

&lt;p&gt;I ran into this error below. It meant my sprite was too small. It took me a long time to realize that.&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Communities and Licenses: Permissive licenses vs copyleft (BSD/MIT/Apache 2.0 vs GPL)</title>
      <link>http://blog.fritzvd.com/2014/02/03/communities-and-licenses-permissive-licenses-vs-copyleft-bsdmitapache-2-0-vs-gpl/</link>
      <pubDate>Mon, 03 Feb 2014 13:07:51 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2014/02/03/communities-and-licenses-permissive-licenses-vs-copyleft-bsdmitapache-2-0-vs-gpl/</guid>
      <description>&lt;p&gt;Over the weekend I was at &lt;a href=&#34;http://fosdem.org&#34; title=&#34;FOSDEM&#34; target=&#34;_blank&#34;&gt;FOSDEM&lt;/a&gt;, an open source developer conference in Brussels. We had a blast. I sat in on a talk at the Legal &amp;#038; Policy Issues room about community building by Eileen Evans. The talk was the one she gave at OSCON 2013 (attached below). The short version of the talk was that the license an open source project uses plays a role in the community it will create, perhaps such a strong role as governance or the technology itself, but a role nonetheless. It was assumed that because copyleft licenses (like GPLv*) build a stronger community because they oblige the contributors to publish their code as open source as well. Over the last few years a move can be observed towards more and more projects with permissive licenses (like BSD/MIT/Apache 2.0). However this did not mean that their communities were less strong, on the contrary, a big project like OpenStack, actually has lots of community contributions, despite or thanks to its permissive license (Apache 2.0).&lt;/p&gt;

&lt;p&gt;For my own projects I prefer the freeer more permissive licenses, my favourite being the &lt;a href=&#34;http://www.wtfpl.net/txt/copying/&#34; title=&#34;Do what the fuck you want to public license&#34; target=&#34;_blank&#34;&gt;WTFPL&lt;/a&gt;, just because it sounds cool, but is basically the same as BSD. For starters I think Developers tend towards these freeer alternatives because we don&amp;#8217;t care. Or we do care about not having to deal with these things and therefore choose a &lt;a href=&#34;http://b.vimeocdn.com/ts/209/994/20999461_640.jpg&#34; title=&#34;hassle-free&#34; target=&#34;_blank&#34;&gt;hassle-free&lt;/a&gt; license. With any licensing debate you get tangled up in details that most developers really don&amp;#8217;t want to deal with. The freedom these licenses give are very important. Even and maybe especially the freedom to change the license if you want. Whereas a GPLv3 license can be very constricting, because all contributions MUST be open source.&lt;/p&gt;

&lt;p&gt;In the car on the way back from Brussels, we were discussing this and again got stuck. First off, because we don&amp;#8217;t know the caveats, loopholes and details by heart. Second of all because it can get quite complicated. Especially with GPL projects. If you&amp;#8217;d like to write an extension or plugin it&amp;#8217;s kind of hard to decide if that falls under the license, or it is exempt from it, because it is not part of the core.&lt;/p&gt;

&lt;p&gt;In my opinion to build a community, you&amp;#8217;d want them to be free to do what they want, without the legal headaches. So for now I&amp;#8217;ll just stick to permissive license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting Game Development with HaxePunk instead of MonoGame/XNA</title>
      <link>http://blog.fritzvd.com/2014/01/06/starting-game-development-with-haxepunk-instead-of-monogamexna/</link>
      <pubDate>Mon, 06 Jan 2014 20:25:23 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2014/01/06/starting-game-development-with-haxepunk-instead-of-monogamexna/</guid>
      <description>

&lt;p&gt;So I started venturing off in a direction in which I have no experience what so ever. Only on the consumer-side of things ;-). Game development. Of course I had no idea what I was doing. Still don&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;To start with I had no idea where to start. Lately I have been looking into Unity 3D and Unreal engine, but then I realized I suck at drawing and have no idea how to start with 3d. So then I was searching around for 2d engines and started out with Cocos2D-x and some other C++ based engines (can&amp;#8217;t remember which), but that was kind of a hassle to get started and my builds would not run on my phone. Also I did not really get there style of documentation.&lt;/p&gt;

&lt;h3 id=&#34;monogame:bbecd484d96d2baba19ac01746a2dcc1&#34;&gt;MonoGame&lt;/h3&gt;

&lt;p&gt;After looking through tutorials and stuff, I settled on the XNA framework, or at least the open source version &amp;#8211;&amp;gt; &lt;a title=&#34;monogame&#34; href=&#34;http://monogame.net/&#34; target=&#34;_blank&#34;&gt;MonoGame&lt;/a&gt;. It is pretty awesome, some of the most legendary indie games: &lt;a title=&#34;Supergiant games&#34; href=&#34;http://supergiantgames.com/index.php/media/&#34; target=&#34;_blank&#34;&gt;Bastion&lt;/a&gt;, &lt;a title=&#34;Fez&#34; href=&#34;http://fezgame.com/&#34; target=&#34;_blank&#34;&gt;FEZ&lt;/a&gt; and &lt;a title=&#34;smb&#34; href=&#34;http://supermeatboy.com/&#34; target=&#34;_blank&#34;&gt;Super Meat Boy&lt;/a&gt; are created with the closed source variant. Which for me was reason enough to find out more. Moreover the Bastion team (supergiant games) used MonoGame to port it to the iPad/iPhone.&lt;/p&gt;

&lt;p&gt;So starting out with some tutorials I was making quite some headway in a short amount of time. C# is a very approachable language and MonoDevelop a lightweight IDE. Especially after trying out the badly indented (illegible) examples I found of all these different C++ libraries.&lt;/p&gt;

&lt;p&gt;After having a first version that featured some smooth running sprites I thought it interesting to test the performance in an iPad simulator. The built worked well on Linux and on the Mac Desktop, but building it for iOS gave me some problems. BECAUSE YOU CAN&amp;#8217;T. Not for free anyways. Xamarin charges you $299,- a year for you to be able to build for Android and iOS.&lt;/p&gt;

&lt;h3 id=&#34;haxe-and-openfl:bbecd484d96d2baba19ac01746a2dcc1&#34;&gt;Haxe and OpenFL&lt;/h3&gt;

&lt;p&gt;I was pretty disheartened, because I remembered all the hassle and strange examples I found with the plethora of frameworks I tried out before and did not really want to go back to that. On some website I found an article on &lt;a href=&#34;http://openfl.org/&#34; title=&#34;openfl&#34; target=&#34;_blank&#34;&gt;OpenFL&lt;/a&gt; an open source flash framework that compiles to *. HTML5, windows, mac, linux, android, ios, blackberry, tizen. You name it. Also used to make this little gem: &lt;a href=&#34;http://rymdkapsel.com/&#34; title=&#34;rymdkapsel&#34; target=&#34;_blank&#34;&gt;rymdkapsel&lt;/a&gt; A port of FlashPunk in Haxe &lt;a href=&#34;http://haxepunk.com/&#34; title=&#34;HaxePunk&#34; target=&#34;_blank&#34;&gt;HaxePunk&lt;/a&gt; had some proper tutorials, it is maintained and was ported chiefly by&lt;a href=&#34;http://matttuttle.com/&#34; title=&#34;Matt Tuttle&#34; target=&#34;_blank&#34;&gt;Matt Tuttle&lt;/a&gt;. (thanks for that).&lt;/p&gt;

&lt;p&gt;The setup of OpenFL and haxepunk is very easy and straightforward and I am easily building to all the promissed targets. I can test my ios builds in the simulator on my Mac and send *.swf links to friends and invite alpa-testers for my Android APK&amp;#8217;s. It is awesome.&lt;/p&gt;

&lt;p&gt;For those to lazy to open the links and find out how easy it really is do this:&lt;/p&gt;

&lt;p&gt;`So I started venturing off in a direction in which I have no experience what so ever. Only on the consumer-side of things ;-). Game development. Of course I had no idea what I was doing. Still don&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;To start with I had no idea where to start. Lately I have been looking into Unity 3D and Unreal engine, but then I realized I suck at drawing and have no idea how to start with 3d. So then I was searching around for 2d engines and started out with Cocos2D-x and some other C++ based engines (can&amp;#8217;t remember which), but that was kind of a hassle to get started and my builds would not run on my phone. Also I did not really get there style of documentation.&lt;/p&gt;

&lt;h3 id=&#34;monogame-1:bbecd484d96d2baba19ac01746a2dcc1&#34;&gt;MonoGame&lt;/h3&gt;

&lt;p&gt;After looking through tutorials and stuff, I settled on the XNA framework, or at least the open source version &amp;#8211;&amp;gt; &lt;a title=&#34;monogame&#34; href=&#34;http://monogame.net/&#34; target=&#34;_blank&#34;&gt;MonoGame&lt;/a&gt;. It is pretty awesome, some of the most legendary indie games: &lt;a title=&#34;Supergiant games&#34; href=&#34;http://supergiantgames.com/index.php/media/&#34; target=&#34;_blank&#34;&gt;Bastion&lt;/a&gt;, &lt;a title=&#34;Fez&#34; href=&#34;http://fezgame.com/&#34; target=&#34;_blank&#34;&gt;FEZ&lt;/a&gt; and &lt;a title=&#34;smb&#34; href=&#34;http://supermeatboy.com/&#34; target=&#34;_blank&#34;&gt;Super Meat Boy&lt;/a&gt; are created with the closed source variant. Which for me was reason enough to find out more. Moreover the Bastion team (supergiant games) used MonoGame to port it to the iPad/iPhone.&lt;/p&gt;

&lt;p&gt;So starting out with some tutorials I was making quite some headway in a short amount of time. C# is a very approachable language and MonoDevelop a lightweight IDE. Especially after trying out the badly indented (illegible) examples I found of all these different C++ libraries.&lt;/p&gt;

&lt;p&gt;After having a first version that featured some smooth running sprites I thought it interesting to test the performance in an iPad simulator. The built worked well on Linux and on the Mac Desktop, but building it for iOS gave me some problems. BECAUSE YOU CAN&amp;#8217;T. Not for free anyways. Xamarin charges you $299,- a year for you to be able to build for Android and iOS.&lt;/p&gt;

&lt;h3 id=&#34;haxe-and-openfl-1:bbecd484d96d2baba19ac01746a2dcc1&#34;&gt;Haxe and OpenFL&lt;/h3&gt;

&lt;p&gt;I was pretty disheartened, because I remembered all the hassle and strange examples I found with the plethora of frameworks I tried out before and did not really want to go back to that. On some website I found an article on &lt;a href=&#34;http://openfl.org/&#34; title=&#34;openfl&#34; target=&#34;_blank&#34;&gt;OpenFL&lt;/a&gt; an open source flash framework that compiles to *. HTML5, windows, mac, linux, android, ios, blackberry, tizen. You name it. Also used to make this little gem: &lt;a href=&#34;http://rymdkapsel.com/&#34; title=&#34;rymdkapsel&#34; target=&#34;_blank&#34;&gt;rymdkapsel&lt;/a&gt; A port of FlashPunk in Haxe &lt;a href=&#34;http://haxepunk.com/&#34; title=&#34;HaxePunk&#34; target=&#34;_blank&#34;&gt;HaxePunk&lt;/a&gt; had some proper tutorials, it is maintained and was ported chiefly by&lt;a href=&#34;http://matttuttle.com/&#34; title=&#34;Matt Tuttle&#34; target=&#34;_blank&#34;&gt;Matt Tuttle&lt;/a&gt;. (thanks for that).&lt;/p&gt;

&lt;p&gt;The setup of OpenFL and haxepunk is very easy and straightforward and I am easily building to all the promissed targets. I can test my ios builds in the simulator on my Mac and send *.swf links to friends and invite alpa-testers for my Android APK&amp;#8217;s. It is awesome.&lt;/p&gt;

&lt;p&gt;For those to lazy to open the links and find out how easy it really is do this:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Now you can start being aweswome and build your crazy ideas for android.&lt;/p&gt;

&lt;p&gt;(Next time I&amp;#8217;ll give some code excerpts and a flash file to test out).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve written a follow up on &lt;a href=&#34;http://blog.technokrat.nl/?p=522&#34; title=&#34;Particle Emitters&#34; target=&#34;_blank&#34;&gt;particle emitters in haxepunk&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UI/UX course &amp;#8211; Highlights &amp;#8211; Storytelling</title>
      <link>http://blog.fritzvd.com/2013/11/18/uiux-course-highlights-storytelling/</link>
      <pubDate>Mon, 18 Nov 2013 09:25:30 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/11/18/uiux-course-highlights-storytelling/</guid>
      <description>

&lt;p&gt;&lt;a title=&#34;Nelen &amp; Schuurmans&#34; href=&#34;http://nelen-schuurmans.nl&#34; target=&#34;_blank&#34;&gt;Nelen &amp;amp; Schuurmans&lt;/a&gt;, the company where I work, offered the Software Developers a User Interface Design course by &lt;a title=&#34;Namahn&#34; href=&#34;http://namahn.com/&#34; target=&#34;_blank&#34;&gt;Namahn&lt;/a&gt;. It was a great reminder of the seemingly obvious processes one can incorporate in a software project, but sadly also a warning for blatant ignorance we sometimes portray as Developers (of course not just at N&amp;amp;S).&lt;/p&gt;

&lt;p&gt;The workflow Namahn uses is similar to what other design oriented companies would use. Which can be described in three phases: Understand, Explore and Define.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understand: observing the user and understanding their problem.&lt;/li&gt;
&lt;li&gt;Explore: trying to find a fitting (the best) solution.&lt;/li&gt;
&lt;li&gt;Define: defining the scope and spec of the project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course this is already quite hilarious, because as a Developer/Builder of things, it often works the other way around. You build something and show it to some users and hope they don&amp;#8217;t have too many problems with what you&amp;#8217;ve built. So you don&amp;#8217;t have to make too many adjustments. Because, let&amp;#8217;s face, it you likely you already blew your budget.&lt;/p&gt;

&lt;p&gt;In the course the teacher was met with some skepticism after sharing his workflow at Namahn. One of the reasons for not being able to carry out the workflow is: It&amp;#8217;s difficult to do this when you have a deadline, so we rather start with the code.&lt;/p&gt;

&lt;p&gt;Which of course is the exact opposite of what you should do. It&amp;#8217;s just a natural resort for Developers.&lt;/p&gt;

&lt;h3 id=&#34;what-i-take-away:f01f088ff6a2a118dfae926c3762f19b&#34;&gt;What I take away&lt;/h3&gt;

&lt;p&gt;What I really liked about the course was the use of paper prototypes and scenarios.&lt;/p&gt;

&lt;h4 id=&#34;scenarios-of-use:f01f088ff6a2a118dfae926c3762f19b&#34;&gt;Scenarios of use&lt;/h4&gt;

&lt;p&gt;What &lt;a title=&#34;Tom Stevens&#34; href=&#34;http://www.namahn.com/about/staff/tom-stevens&#34; target=&#34;_blank&#34;&gt;Tom Stevens&lt;/a&gt; mentioned about the exploring step was: &amp;#8220;words are very cheap at this stage&amp;#8221;. So why not take advantage of that fact? Write stories (not use cases which exhaustively explain the functionality) about what and how a user would use the product. Make it fit in with and be of help for their workflow, don&amp;#8217;t impose your product in their process. Focus on typical but also on atypical users (e.g. incidental and daily users). A scenario is a story describing a user which needs to get something done. Your product would help her in the process.&lt;/p&gt;

&lt;h4 id=&#34;paper-prototypes:f01f088ff6a2a118dfae926c3762f19b&#34;&gt;Paper prototypes&lt;/h4&gt;

&lt;p&gt;The second thing Tom mentioned to be very cheap was a paper prototype instead of creating a whole HTML mockup. With a paper prototype you already have to think about how a user would interact with the product and what it should look like. Which buttons go where? What text is useful, what elements of the user interface have no meaning for the user?. You can test it with your colleagues, users or whatever at very little cost. Paper is cheap, and anyone can write and draw.&lt;/p&gt;

&lt;p&gt;Below is a summary video shot by one of my colleagues. The video speaks for itself, if you speak Dutch you&amp;#8217;ll pick up a little more of what we did.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vimeo.com/79380054&#34;&gt;UI training Nelen Schuurmans&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/reinoutvanrees&#34;&gt;Reinout van Rees&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:f01f088ff6a2a118dfae926c3762f19b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Maybe we cannot use every little detail of the process that was proposed in the course. But it just shows that you don&amp;#8217;t have to have very elaborate and expensive methods to improve your workflow.&lt;/p&gt;

&lt;p&gt;P.S. We got mentioned in FastCompany&amp;#8217;s article on Dutch Engineering: &lt;a href=&#34;http://www.fastcompany.com/3018621/against-the-tide&#34; title=&#34;Against the Tide&#34; target=&#34;_blank&#34;&gt;Against the Tide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.P.S. This book helped me think differently about interfacing: Don&amp;#8217;t make me think by Steve Krug.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular JS Favourites/Favorites &amp;#8211; Directives &amp;#8211;  jQuery UI Slider</title>
      <link>http://blog.fritzvd.com/2013/06/18/angular-js-favorites-directives-jquery-ui-slider/</link>
      <pubDate>Tue, 18 Jun 2013 11:48:43 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/06/18/angular-js-favorites-directives-jquery-ui-slider/</guid>
      <description>

&lt;p&gt;Last time I wrote something about something very simple, but something I really enjoy. Conditional classes and inline event handlers. It&amp;#8217;s not a very difficult or complex feature. But I did not find a lot of writing about it. And also it saved me loads of jQuery statements that you don&amp;#8217;t want in a controller, but in the UI.&lt;/p&gt;

&lt;h3 id=&#34;next-up-directives:f3744e420fdc4e8aafb0a8196a307cc8&#34;&gt;Next up: Directives.&lt;/h3&gt;

&lt;p&gt;&lt;a title=&#34;Angular Docs on Directives&#34; href=&#34;http://docs.angularjs.org/guide/directive&#34; target=&#34;_blank&#34;&gt;Directives&lt;/a&gt; are pret-ty awesomevilles. For the &amp;#8220;stop/play video player like&amp;#8221;-thing we are building, we would like to have a timeline or time slider, to go back to a previous images. Normally this would be a jQuery (jQuery UI) call like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax html&#34;&gt;&amp;lt;div id=&#34;id-of-div-or-wha-evah&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;javascript syntax&#34;&gt;$(&#39;#id-of-div-or-wha-evah&#39;).slider()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which would be fine if you need only one of these, or if you would have a small app. With an Angular Directive it becomes a bit more complex, but also a lot more useful. Our product is a &lt;a title=&#34;3di&#34; href=&#34;http://www.3di.nu&#34; target=&#34;_blank&#34;&gt;groundbreaking flooding model&lt;/a&gt;. Basically you can run a super fast flooding simulation in the cloud and look at the results on-the-fly in your browser. With every simulation step the complete timeline becomes longer, thus we need a timeline that can listen to other states and messages in our application. Because all the states and messages are already in the app, I don&amp;#8217;t want to jQuery my way out of this one.&lt;/p&gt;

&lt;p&gt;So I created the following HTML component and angular directive.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re to lazy to look up the &lt;a title=&#34;Angular Docs on Directives&#34; href=&#34;http://docs.angularjs.org/guide/directive&#34; target=&#34;_blank&#34;&gt;docs&lt;/a&gt;, I&amp;#8217;ll give you some pointers. The most important thing to notice here is that the directive and the html element correspond because of the title. The html tag: &lt;em&gt;&lt;jq-schlider&gt;&lt;/em&gt; is recognized by the &lt;em&gt;jqSchlider&lt;/em&gt; directive defined in angular because of the &lt;em&gt;restrict: &amp;#8216;E&amp;#8217;&lt;/em&gt; line. The &lt;em&gt;E&lt;/em&gt; stands for element but can also be replaced by something else (look in the docs) if that has your fancy.&lt;/p&gt;

&lt;p&gt;The HTML attributes max and at are picked up by the directive as variables. The values come from the Controller in which the jqSchlider will be inserted.&lt;/p&gt;

&lt;p&gt;The fiddle below is a working example:&lt;/p&gt;

&lt;p&gt;Get this btw it&amp;#8217;s great:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular JS Favourites/Favorites &amp;#8211; Conditional CSS classes</title>
      <link>http://blog.fritzvd.com/2013/06/17/starting-angular-js-favourite-features-or-favorites-if-your-from-the-u-s/</link>
      <pubDate>Mon, 17 Jun 2013 17:22:19 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/06/17/starting-angular-js-favourite-features-or-favorites-if-your-from-the-u-s/</guid>
      <description>

&lt;p&gt;Last few weeks at work I have been trying out Angular JS. First of all, because it is fun and useful to try out new stuff. Secondly because after working with &lt;a title=&#34;marionette&#34; href=&#34;http://marionettejs.com/&#34; target=&#34;_blank&#34;&gt;Backbone/Marionette&lt;/a&gt; for a few months some things felt that they could&amp;#8217;ve been done better. So whilst working on a big Backbone/Marionette &lt;a title=&#34;ddsc&#34; href=&#34;http://github.com/ddsc/webclient&#34; target=&#34;_blank&#34;&gt;project&lt;/a&gt; I started looking at Angular a bit.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll just show you some of my favourite features. We are building an app that needs to play, stop, pause etc much like a video player. But we need to do quite a bit more than that. I&amp;#8217;ll highlight two features that really helped out clear out some old jQuery blah blah. Maybe I&amp;#8217;ll write some more on my favourites coming week.&lt;/p&gt;

&lt;h3 id=&#34;conditional-css-classes:acafb5aefad66b0cd6e57453de04b7cf&#34;&gt;&lt;strong&gt;Conditional CSS classes:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;One thing that I kept running into is having to decide when to use a jQuery handler or a Backbone built-in function to toggle a CSS class. This sounds trivial, and maybe it is, but this is such a common feature in a interactive client, that it is a relief to see it handled nicely.&lt;/p&gt;

&lt;h3 id=&#34;inline-coupling-of-dom-element-and-javascript-function:acafb5aefad66b0cd6e57453de04b7cf&#34;&gt;&lt;strong&gt;Inline coupling of DOM element and javascript function:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I know, I know this is done in almost any MVC framework. But I just like the way Angular has set this up. Just add HTML attribute &lt;code&gt;ng-click=&amp;quot;nameoffunction()&amp;quot;&lt;/code&gt; and the &lt;code&gt;$scope.nameoffunction&lt;/code&gt; function responds to this. Example below clarifies both Conditional CSS classes and click-handler.&lt;/p&gt;

&lt;p&gt;Example play and stop button.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax html&#34;&gt;&amp;lt;div ng-controller=&#34;RemoteControl&#34;&amp;gt; 
  &amp;lt;a id=&#34;btn-play&#34; class=&#34;btn&#34; ng-class=&#34;{active: isPlaying}&#34; ng-click=&#34;play()&#34;&amp;gt;
    &amp;lt;i class=&#34;icon-play&#34;&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;syntax javascript&#34;&gt;app.controller(&#34;RemoteControl&#34;, [&#34;$scope&#34;], function($scope){
   $scope.isPlaying = false;

   $scope.play = function() {
      if ($scope.isPlaying) {
        // if already playing turn it off.
        $scope.isPlaying = false;
      } else {
         // do stuff involved with play
         // switch isPlaying to true
         $scope.isPlaying = true;
      }
   }
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next week I&amp;#8217;ll make some time to discuss Directives.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vagrant</title>
      <link>http://blog.fritzvd.com/2013/02/04/vagrant/</link>
      <pubDate>Mon, 04 Feb 2013 13:08:01 +0000</pubDate>
      
      <guid>http://blog.fritzvd.com/2013/02/04/vagrant/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://vagrantup.com&#34; title=&#34;vagrant&#34;&gt;Vagrant&lt;/a&gt; is a great tool if you like to develop and test on the same server. Or at least emulate that you have the same server and at the same time keep your own system fairly clean.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been using it for quite a while. After reinstalling my ubuntu machine to get rid of 12.10 and start 12.04 LTS a fresh I had to fix something in my install of vagrant. This is very trivial, but I always get annoyed if I can&amp;#8217;t find the solution in one DuckDuckGo/Google search. So I hope I save you a google-trip.&lt;/p&gt;

&lt;p&gt;After downloading the .deb from &lt;a href=&#34;http://vagrantup.com&#34;&gt;http://vagrantup.com&lt;/a&gt; I installed using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax bash&#34;&gt;sudo dpkg -i ~/Downloads/vagrant_x86_64.deb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards getting up and running using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax bash&#34;&gt;vagrant box add pengolin64 http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-vagrant-amd64-disk1.box&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did not deliver any results. For me the solution was in symlinking the vagrant binary.. (why is it not installed in /usr/bin?)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;syntax bash&#34;&gt;sudo ln -s /opt/vagrant/bin/vagrant /usr/bin/vagrant&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you go. Hope that helps.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>